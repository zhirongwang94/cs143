ls
;
show databases
;
use cs143;
show tables; 
SELECT * FROM Movies; 
SELECT * FROM Movie; 
SELECT * FROM Movie LIMIT 10;
cd cs143
;
show tables
;
use cs143
show tables
;
SELECT * FROM Student
;
SELECT * FROM Movie;
SELECT * FROM Movie LIMIT 10;
show tables
;
select * from Actor limit 10; 
select * from Movie limit 20; 
select * from Movie limit 20 where title=%valley%; 
;
select * from Movie  where title=%valley%; 
select * from Movie  where year=2001; 
select * from Movie  where year=2001 limit 10; 
select * from Movie  where title=ali limit 10; 
select * from Movie  where title="ali" limit 10; 
select * from Movie  where title="all" limit 10; 
select * from Movie  where title="%all%" limit 10; 
select * from Movie  where title=%"all"% limit 10; 
select * from Movie  where title=%"all"% ; 
select * from Movie  where title="ali" ; 
select * from Movie  limit 10; 
select * from Movie limit 20;; 
select * from Movie limit 10;; 
select * from Movie limit 10 WHERE title like "%you%"; 
select * from Movie limit 10 WHERE title like '%you%'; 
select * from Movie WHERE title like '%you%'; 
select * from Movie WHERE title like '%you%' limit 10; 
select * from Movie WHERE title like '%you%' limit 2; 
select * from Movie WHERE title like "%you%" limit 2; 
select * from Movie WHERE title like "%you%" ; 
select * from Movie WHERE title like "%you%" limit 2;
SELECT * FROM Movie WHERE title LIKE "%you%" AND tile  LIKE "%when%"
;
SELECT * FROM Movie WHERE title LIKE "%you%" AND tile  LIKE "%when%";
SELECT * FROM Movie WHERE title LIKE "%you%" AND title  LIKE "%when%";
SELECT * FROM Movie WHERE title LIKE "%cry%" 
;
SELECT * FROM Movie WHERE title LIKE "%cry%" AND title LIKE "%boy%;
;
";
SELECT * FROM Movie WHERE title LIKE "%cry%" AND title LIKE "%boy%;
;
;
;
";
SELECT * FROM Movie WHERE title LIKE "%cry%" AND title LIKE "%boy%" ;
SELECT * FROM Movie WHERE title LIKE "%boy%" AND title LIKE "%cry%" ;
show tables
;
select * from Actor
 limit 10;
select * from Actor  limit 10;
SELECT * FROM Movie WHERE ;
SELECT * FROM Movie WHERE;
select * from Actor  limit 10;
select * from Actor  limit 30;
select * from Actor  limit 10;
SELECT * FROM Actor WHERE first LIKE "%hank%" OR last LIKE "%hank%" 
;
SELECT * FROM Actor WHERE (first LIKE "%hank%" AND last LIKE "%jim%" );
SELECT * FROM Actor WHERE (first LIKE "%jim%" AND last LIKE "%hunk%" )
;
SELECT * FROM Actor WHERE (first LIKE "%hank%" AND last LIKE "%a%" )
;
SELECT * FROM Actor WHERE (first LIKE "%ar%" AND last LIKE "%an%" ) OR (first LIKE "%an%" AND last LIKE "%ar%" );
SELECT * FROM Actor WHERE (first LIKE "%hank%" AND last LIKE "%a%" )
;
SELECT * FROM Actor WHERE SELECT * FROM Actor WHERE (first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" );
SELECT * FROM Actor WHERE SELECT * FROM Actor WHERE (first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" );ELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))
ELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))
;
ELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))   ELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ));
ELECT * FROM Actor WHERE(first LIKE "%Aaron%" AND last LIKE "%hank%" )
;
ELECT * FROM Actor WHERE (first LIKE "%Aaron%" AND last LIKE "%hank%" );
ELECT * FROM Actor WHERE first LIKE "%Aaron%" AND last LIKE "%hank%" ;
SELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))
;
 SELECT * FROM Actor WHERE ((first LIKE "%Hank%" AND last LIKE "%Aaron%" ) OR (first LIKE "%Aaron%" AND last LIKE "%Hank%" ))
;
 SELECT * FROM Movie WHERE title LIKE "%Aaron%" AND title LIKE "%hank%" 
;
SELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))
;
SELECT * FROM Movie WHERE title LIKE "%cry%" AND title LIKE "%boy%" 
;
SELECT * FROM Actor WHERE ((first LIKE "%Aaron%" AND last LIKE "%hank%" ) OR (first LIKE "%hank%" AND last LIKE "%Aaron%" ))
;
select null from Movie
;
select null from Movie where false;
select * from Movie where false;
 SELECT * FROM Movie WHERE title LIKE "%hank%" 
;
SELECT * FROM Actor WHERE (first LIKE '%Aaron%' AND last LIKE '%hank%' );
SELECT * FROM Actor WHERE (last LIKE '%Aaron%' AND first LIKE '%hank%' )
;
SELECT * FROM Actor WHERE (last LIKE '%Aaron%' AND first LIKE '%hank%' )
;
use cs143
ls
s;
ls s;
show tables; 
select * Movie limit 10; 
select * from Movie limit 10; 
select * from Actor limit 10; 
select * from Actor limit 20; 
use cs143
SELECT * FROM Actor WHERE first LIKE "%cry%" OR last LIKE "%cry%" 
;
 SELECT * FROM Movie WHERE title LIKE "%cry%" 
;
THE FIRST QUERY IS: SELECT * FROM Movie WHERE id=900
;
 SELECT * FROM Movie WHERE id=900;
show tables 
;
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
use cs143
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '~/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '~/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
use cs143
LOAD DATA LOCAL INFILE '~/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '~/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
use cs143
LOAD DATA LOCAL INFILE '~/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '~/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
CREATE TABLE MovieDirector (
-- Movie ID
mid INT NOT NULL,
-- Director ID
did INT NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id),
-- did references Director table
FOREIGN KEY (did) REFERENCES Director(id)
);
CREATE TABLE MovieDirector (  mid INT NOT NULL,  did INT NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id),  FOREIGN KEY (did) REFERENCES Director(id) );
-- load MovieDirector data
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
show tables 
;
SELECT * FROM MovieDirector WHERE mid=550
;
SELECT * FROM MovieDirector WHERE mid=550
;
CREATE TABLE Director (
-- Director ID
id INT NOT NULL,
-- Last name
last VARCHAR(20) NOT NULL,
-- First name
first VARCHAR(20) NOT NULL,
-- Date of birth
dob DATE NOT NULL,
-- Date of death
dod DATE,
-- Primary key constraint for Director ID
PRIMARY KEY (id)
);
CREATE TABLE Director (  id INT NOT NULL,  last VARCHAR(20) NOT NULL,  first VARCHAR(20) NOT NULL,  dob DATE NOT NULL,  dod DATE,  PRIMARY KEY (id) );
-- load Director data
LOAD DATA LOCAL INFILE '/home/cs143/data/director.del' 
INTO TABLE Director 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/director.del'  INTO TABLE Director  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from Director limit 10; 
SELECT * FROM Director WHERE id=48432;
CREATE TABLE MovieGenre (
-- Movie ID
mid INT NOT NULL,
-- Movie genre
genre VARCHAR(20) NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id)
);
CREATE TABLE MovieGenre (  mid INT NOT NULL,  genre VARCHAR(20) NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id) );
-- load MovieGenre data
LOAD DATA LOCAL INFILE '/home/cs143/data/moviegenre.del' 
INTO TABLE MovieGenre 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviegenre.del'  INTO TABLE MovieGenre  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from MovieGenre limit 10; 
 SELECT * FROM MovieGenre WHERE mid=550
;
SELECT * FROM MovieActor WHERE mid=550
;
CREATE TABLE MovieActor (
-- Movie ID
mid INT NOT NULL,
-- Actor ID
aid INT NOT NULL,
-- Actor role in movie
role VARCHAR(50) NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id),
-- aid references Actor table
FOREIGN KEY (aid) REFERENCES Actor(id)
);
CREATE TABLE MovieActor (  mid INT NOT NULL,  aid INT NOT NULL,  role VARCHAR(50) NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id),  FOREIGN KEY (aid) REFERENCES Actor(id) );
-- load MovieActor data
-- load movieactor1.del into MovieAcotr table 
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor1.del' 
INTO TABLE MovieActor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor1.del'  INTO TABLE MovieActor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load movieactor2.del into MovieAcotr table 
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor2.del' 
INTO TABLE MovieActor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor2.del'  INTO TABLE MovieActor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM MovieActor WHERE mid=550
;
Select * 
From Actor MovieActor 
Where mid=$selected_movie_id 
 and aid=id ;
Select *  From Actor MovieActor  Where mid=$selected_movie_id   and aid=id;
Select *  From Actor MovieActor  Where MovieActor.mid=$selected_movie_id   and aid=id;
Select *  From Actor, MovieActor  Where MovieActor.mid=$selected_movie_id   and aid=id;
Select *  From Actor, MovieActor  Where mid=510   and aid=id;
Select *  From MovieActor limit 10 
;
SELECT * FROM Actor, MovieActor WHERE aid=id AND mid=550
;
SELECT * FROM MovieDirector WHERE mid=897;
SELECT * FROM Actor where id=5501
;
             |
+-------+----------+----------+--------+------------+------+-----+-------+-----------------
;
| +-------+----------+----------+--------+------------+------+-----+-------+---------------;
SELECT * FROM Movie WHERE id=5501
;
SELECT * FROM Movie WHERE id=5501
;
 SELECT * FROM Actor WHERE id=5501;
SELECT * FROM Movie, Actor, MovieActorWHERE MovieActor.aid=5501 AND MovieActor.mid=Movie.id AND Actor.id=5501;
SELECT * FROM Movie, Actor, MovieActor WHERE MovieActor.aid=5501 AND MovieActor.mid=Movie.id AND Actor.id=5501
;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/data/movie.del' 
INTO TABLE Movie 
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/movie.del'  INTO TABLE Movie  FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Actor data
-- load actor1.del to Actor table 
LOAD DATA LOCAL INFILE '/home/cs143/data/actor1.del' 
INTO TABLE Actor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/actor1.del'  INTO TABLE Actor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"'  LINES TERMINATED BY '\n';
-- load actor2.del to Actor table 
LOAD DATA LOCAL INFILE '/home/cs143/data/actor2.del' 
INTO TABLE Actor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/actor2.del'  INTO TABLE Actor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load actor3.del to Actor table 
LOAD DATA LOCAL INFILE '/home/cs143/data/actor3.del' 
INTO TABLE Actor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/actor3.del'  INTO TABLE Actor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Director data
LOAD DATA LOCAL INFILE '/home/cs143/data/director.del' 
INTO TABLE Director 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/director.del'  INTO TABLE Director  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load MovieGenre data
LOAD DATA LOCAL INFILE '/home/cs143/data/moviegenre.del' 
INTO TABLE MovieGenre 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviegenre.del'  INTO TABLE MovieGenre  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load MovieDirector data
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del' 
INTO TABLE MovieDirector 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/moviedirector.del'  INTO TABLE MovieDirector  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load MovieActor data
-- load movieactor1.del into MovieAcotr table 
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor1.del' 
INTO TABLE MovieActor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor1.del'  INTO TABLE MovieActor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load movieactor2.del into MovieAcotr table 
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor2.del' 
INTO TABLE MovieActor 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/data/movieactor2.del'  INTO TABLE MovieActor  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- no load file for Review table, since it will be added by users. 
CREATE TABLE Movie (
-- Movie ID
id INT NOT NULL,
-- Movie title
title VARCHAR(100) NOT NULL,
-- Release year
year INT NOT NULL,
-- MPAA rating
rating VARCHAR(10) NOT NULL,
-- Production company
company VARCHAR(50) NOT NULL,
-- Primary key constraint for Movie ID
PRIMARY KEY (id)
);
CREATE TABLE Movie (  id INT NOT NULL,  title VARCHAR(100) NOT NULL,  year INT NOT NULL,  rating VARCHAR(10) NOT NULL,  company VARCHAR(50) NOT NULL,  PRIMARY KEY (id) );
CREATE TABLE Actor (
-- Actor ID
id INT NOT NULL,
-- Last name
last VARCHAR(20) NOT NULL,
-- First name
first VARCHAR(20) NOT NULL,
-- Sex of the actor
sex VARCHAR(6) NOT NULL,
-- Date of birth
dob DATE NOT NULL,
-- Date of death
dod DATE,
-- Primary key constraint for Actor ID
PRIMARY KEY (id),
-- sex = "Female" or "Male"
CHECK (sex = "Female" OR sex = "Male")
);
CREATE TABLE Actor (  id INT NOT NULL,  last VARCHAR(20) NOT NULL,  first VARCHAR(20) NOT NULL,  sex VARCHAR(6) NOT NULL,  dob DATE NOT NULL,  dod DATE,  PRIMARY KEY (id),  CHECK (sex = "Female" OR sex = "Male") );
CREATE TABLE Director (
-- Director ID
id INT NOT NULL,
-- Last name
last VARCHAR(20) NOT NULL,
-- First name
first VARCHAR(20) NOT NULL,
-- Date of birth
dob DATE NOT NULL,
-- Date of death
dod DATE,
-- Primary key constraint for Director ID
PRIMARY KEY (id)
);
CREATE TABLE Director (  id INT NOT NULL,  last VARCHAR(20) NOT NULL,  first VARCHAR(20) NOT NULL,  dob DATE NOT NULL,  dod DATE,  PRIMARY KEY (id) );
CREATE TABLE MovieGenre (
-- Movie ID
mid INT NOT NULL,
-- Movie genre
genre VARCHAR(20) NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id)
);
CREATE TABLE MovieGenre (  mid INT NOT NULL,  genre VARCHAR(20) NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id) );
CREATE TABLE MovieDirector (
-- Movie ID
mid INT NOT NULL,
-- Director ID
did INT NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id),
-- did references Director table
FOREIGN KEY (did) REFERENCES Director(id)
);
CREATE TABLE MovieDirector (  mid INT NOT NULL,  did INT NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id),  FOREIGN KEY (did) REFERENCES Director(id) );
CREATE TABLE MovieActor (
-- Movie ID
mid INT NOT NULL,
-- Actor ID
aid INT NOT NULL,
-- Actor role in movie
role VARCHAR(50) NOT NULL,
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id),
-- aid references Actor table
FOREIGN KEY (aid) REFERENCES Actor(id)
);
CREATE TABLE MovieActor (  mid INT NOT NULL,  aid INT NOT NULL,  role VARCHAR(50) NOT NULL,  FOREIGN KEY (mid) REFERENCES Movie(id),  FOREIGN KEY (aid) REFERENCES Actor(id) );
CREATE TABLE Review (
-- Reviewer name
name VARCHAR(20),
-- Review time
time TIMESTAMP DEFAULT NOW(),
-- Movie ID
mid INT NOT NULL,
-- Review rating
rating INT,
-- Reviewer comment
comment VARCHAR(500),
-- mid references Movie table
FOREIGN KEY (mid) REFERENCES Movie(id),
-- 0 <= rating <= 5
CHECK (rating IS NULL OR (0 <= rating AND rating <= 5))
);
CREATE TABLE Review (  name VARCHAR(20),  time TIMESTAMP DEFAULT NOW(),  mid INT NOT NULL,  rating INT,  comment VARCHAR(500),  FOREIGN KEY (mid) REFERENCES Movie(id),  CHECK (rating IS NULL OR (0 <= rating AND rating <= 5)) );
SELECT * FROM Movie, Actor, MovieActor WHERE MovieActor.aid=10529 AND MovieActor.mid=Movie.id AND Actor.id=10529;
SELECT * FROM Movie, Actor, MovieActor WHERE MovieActor.aid=10529  AND Actor.id=10529;
SELECT * FROM Movie, Actor, MovieActor WHERE MovieActor.aid=10529;
SELECT * FROM Movie, Actor, MovieActor WHERE aid=10529;
SELECT * FROM MovieActor WHERE aid=10529;
select * from Movie where id=897;
SELECT * FROM Director MovieDirector / WHERE Director.id=MovieDirector.did / AND MovieDirector.mid=897
;
 SELECT * FROM Director MovieDirector \ WHERE Director.id=MovieDirector.did \ AND MovieDirector.mid=897
SELECT * FROM Director MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=897;
SELECT * FROM Director MovieDirector \ WHERE Director.id=MovieDirector.did \ AND MovieDirector.mid=897 SELECT * FROM Director MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=897;
SELECT * FROM Director MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=897;
SELECT * FROM Director MovieDirector WHERE id=MovieDirector.did AND MovieDirector.mid=897;
SELECT * FROM Director MovieDirector WHERE id=did AND MovieDirector.mid=897;
 SELECT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=897;
 SELECT * FROM Director, MovieDirector WHER  MovieDirector.mid=897;
 SELECT * FROM MovieDirector where  mid=897;
 SELECT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=550;
 SELECT DISTINCT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=897
;
 SELECT DISTINCT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=570
;
 SELECT DISTINCT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=550
;
SELECT DISTINCT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=570;
SELECT DISTINCT * FROM Director, MovieDirector WHERE Director.id=MovieDirector.did AND MovieDirector.mid=550;
SELECT * FROM MovieGenre WHERE mid=3272
;
SELECT DISTINCT * FROM Actor, MovieActor WHERE aid=id AND mid=550;
select * from Review 
;
show Review
;
describe Review
;
rINSERT INTO Review
Zhirong  1612078546, 123, good ;movie2, wangVALUES (
rINSERT INTO Review Zhirong  1612078546, 123, good;
;
INSERT INTO Review
Zhirong  1612078546, 123, good ;movie2, wangVALUES (;
INSERT INTO Review Zhirong  1612078546, 123, good;
INSERT INTO Review
Zhirong  1612078546, 123, good ;movie2, wangVALUES (
INSERT INTO Review Zhirong  1612078546, 123, good;
;
INSERT INTO Review 
Zhirong  1612078546, 123, good movie2, wangVALUES (
;
INSERT INTO Review  Zhirong  1612078546, 123, good movie2, wangVALUES (;
INSER INTO Review  VALUES ("zhirongw", 1612078546, 123, 2 "good m" );
describe review
;
describe Review
;
INSERT INTO Review(name, time, mid, rating, comment) 
Zhirong  1612078546, 123, good movie2, wangVALUES (
;
INSERT INTO Review(name, time, mid, rating, comment)  Zhirong  1612078546, 123, good movie2, wangVALUES (;
INSERT INTO Review(name, time, mid, rating, comment) 
Zhirong  1612078546, 123, good ;movie2, wangVALUES (
INSERT INTO Review(name, time, mid, rating, comment)  Zhirong  1612078546, 123, good;
INSERT INTO Review(name, time, mid, rating, comment) 
VALUES ('Zhirong wang', 1612078546, 123, 2, 'good movie');
movie2, wangVALUES ( INSERT INTO Review(name, time, mid, rating, comment)  VALUES ('Zhirong wang', 1612078546, 123, 2, 'good movie');
INSERT INTO Review(name, time, mid, rating, comment) 
VALUES ('Zhirong wang', 1612078546, 123, 2, 'good movie');
INSERT INTO Review(name, time, mid, rating, comment)  VALUES ('Zhirong wang', 1612078546, 123, 2, 'good movie');
select * Movie limit 10; 
select * from Movie limit 10; 
select * from Actor limit 10; 
INSERT INTO Review(name, time, mid, rating, comment) 
VALUES ('Zhirong wang', '2015-11-05 14:29:36', 123, 2, 'good movie');
INSERT INTO Review(name, time, mid, rating, comment)  VALUES ('Zhirong wang', '2015-11-05 14:29:36', 123, 2, 'good movie');
select * from Movie limit 10; 
INSERT INTO Review(name, time, mid, rating, comment) 
VALUES ('Zhirong wang', '2015-11-05 14:29:36', 14, 2, 'good movie');
INSERT INTO Review(name, time, mid, rating, comment)  VALUES ('Zhirong wang', '2015-11-05 14:29:36', 14, 2, 'good movie');
select * from Review; 
INSERT INTO Review(name, time, mid, rating, comment) 
VALUES ('Zhirong wang', 20210131074956, 14, 2, 'good movie');
INSERT INTO Review(name, time, mid, rating, comment)  VALUES ('Zhirong wang', 20210131074956, 14, 2, 'good movie');
select * from Review; 
INSERT INTO Review(name, time, mid, rating, comment) VALUES (zw, 2021-01-31 12:00:32, 14, , dd) ;
 INSERT INTO Review(name, time, mid, rating, comment) VALUES (zw, 2021-01-31 12:01:09, 14, 4, dd) ;
 INSERT INTO Review(name, time, mid, rating, comment) VALUES ('zw', '2021-01-31 12:01:09', 14, 4, 'dd') ;
select * from Review; 
INSERT INTO Review(name, time, mid, rating, comment) VALUES ('zw', '2021-01-31 12:04:11', 14, 4, 'dd') ;
select * from Review; 
INSERT INTO Review(name, time, mid, rating, comment) VALUES ('Mr.Anonymous', '2021-01-31 12:58:33', 0, 0, 'ss') ;
INSERT INTO Review(name, time, mid, rating, comment) VALUES ('Mr.Anonymous', '2021-01-31 12:59:43', 0, 3, 'as') ;
show tables 
;
INSERT INTO Review(name, time, mid, rating, comment) VALUES ('Mr.Anonymous', '2021-01-31 10:35:31', 2318, 3, 'aa') ;
select * from Review
;
select * from Review
;
select * from Review
;
select * from Review
;
select * from Review;
SELECT AVG(mid) from Review WHERE mid=550;
SELECT AVG(rating) from Review WHERE mid=550;
SELECT rating from Review WHERE mid=550;
SELECT *  from Review WHERE mid=550;
SELECT *  from Review ;
SELECT AVG(rating), COUNT(rating) from Review WHERE mid=550;
SELECT AVG(rating), COUNT(rating) from Review WHERE mid=550
;
SELECT * from Review WHERE mid=550;
use cs143
SELECT * FROM Movie WHERE title LIKE '%you%'' AND title  LIKE '%when%'
;
"
;
"
;
"
quit 
use cs143; 
select * from Actor limit 10; 
SELECT * FROM Actor WHERE first=tom ;
SELECT * FROM Actor WHERE first='tom' ;
SELECT * FROM Actor WHERE first='tom';
SELECT * FROM Movie LIMIT 10;
SELECT * FROM Movie WHERE title='cry' ;
SELECT * FROM Movie ;
SELECT * FROM Movie WHERE title='boy';
SELECT * FROM Movie limit 10; ;
SELECT * FROM Movie WHERE title='you' ;
SELECT * FROM Movie WHERE title like 'you';
SELECT * FROM Movie WHERE title like '%you%';
SELECT * FROM Actor LIMIT 2;
SELECT * FROM Movie WHERE title like '%cry%' AND title like '%boy%' AND title like '%you%' ;
SELECT * FROM Movie WHERE title like '%cry%' AND title like '%boy%';
SELECT * FROM Movie WHERE title like '%cry%' AND title like '%boy%' AND title like '%dont%' ;
SELECT * FROM Movie WHERE title LIKE '%cry%' AND title LIKE '%boy%' AND title LIKE '%dont%' ;
select * from Actor limit 2; 
SELECT * FROM false;
SELECT * FROM Actor WHERE false ;
SELECT * FROM Actor WHERE first=Minna AND last=Aaltonen ;
SELECT * FROM Actor WHERE first='Minna' AND last='Aaltonen' ;
use cs143
ls
;
show tables
;
CREATE TABLE AAA;
CREATE TABLE AAA();
CREATE TABLE City (
-- Movie ID
id INT NOT NULL,
-- Movie title
title VARCHAR(100) NOT NULL,
-- Release year
year INT NOT NULL,
-- MPAA rating
rating VARCHAR(10) NOT NULL,
-- Production company
company VARCHAR(50) NOT NULL,
-- Primary key constraint for Movie ID
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  title VARCHAR(100) NOT NULL,  year INT NOT NULL,  rating VARCHAR(10) NOT NULL,  company VARCHAR(50) NOT NULL,  PRIMARY KEY (id) );
ls
;
 show tables
;
drop table City
;
 show tables
;
drop table City
;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrizes;
-- MPAA rating
rating VARCHAR(10) NOT NULL,
-- Production company
company VARCHAR(50) NOT NULL,
-- Primary key constraint for Movie ID;
;
rating VARCHAR(10) NOT NULL,  company VARCHAR(50) NOT NULL,;
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
show tables
;
select * from City
;
use cs143
show tables
;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City 
;
use cs143
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
-- FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City   OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
FIELDS TERMINATED BY ","
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City  ENCLOSED BY '"' FIELDS TERMINATED BY "," LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
ESCAPED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ","  ENCLOSED BY '"' ESCAPED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM CITIES
;
SELECT * FROM City limit 10;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
ESCAPED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' ESCAPED BY '"' LINES TERMINATED BY '\n';
DROP TABLE IF EXISTS City;
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' ESCAPED BY '"' LINES TERMINATED BY '\n';
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
ESCAPED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' ESCAPED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
ESCAPED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' ESCAPED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City limit 10
;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
LINES TERMINATED BY '\n\r';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\n\r';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City limit 10
;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
LINES TERMINATED BY '\n\r';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\n\r';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City
;
DROP TABLE IF EXISTS City;
select * from City
;
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City
;
select * from City limit 10;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\n';
select * from City limit 10
;
drop table City
;
select * from City
;
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\n';
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '\"'
ESCAPED BY '\"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '\"' ESCAPED BY '\"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from City limit 10;
select * from City limit 10; 
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
ENCLOSED BY '|'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY ','  ENCLOSED BY '|' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM City limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '\"'
LINES TERMINATED BY '\r\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\r\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- load Movie data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM Organization limit 10;
SELECT id FROM Person
WHERE familyName="Curie" AND givenName="Marie";
SELECT id FROM Person WHERE familyName="Curie" AND givenName="Marie";
SELECT id FROM Person
WHERE familyName=Curie AND givenName=Marie;
SELECT id FROM Person WHERE familyName=Curie AND givenName=Marie;
SELECT * FROM Person
WHERE familyName=Marie
;
SELECT * FROM Person WHERE familyName=Marie;
SELECT * FROM Person
WHERE familyName=Marie
;
SELECT * FROM Person WHERE familyName=Marie;
SELECT * FROM Person 
WHERE id=745;
SELECT * FROM Person  WHERE id=745;
SELECT * FROM Person 
WHERE name=Aaron
;
SELECT * FROM Person  WHERE name=Aaron;
SELECT * FROM Person 
WHERE givenName=Aaron;
SELECT * FROM Person  WHERE givenName=Aaron;
SELECT * FROM Person 
WHERE givenName="Aaron";
SELECT * FROM Person  WHERE givenName="Aaron";
docker cp /Users/zhirongwang/desktop/cs143/project3/convert/person.del mysql-apache:/home/cs143/project3/convert/person.del
use cs143
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM Person 
WHERE givenName="Aaron";
SELECT * FROM Person  WHERE givenName="Aaron";
SELECT * FROM Person limit 10; 
SELECT * FROM Person where givenName = "Wilhelm Conrad";
SELECT * FROM Person limit 10; 
SELECT * FROM Person where birth_city_id=735;
SELECT * FROM Person where givenName = "%Conrad%";
SELECT * FROM Person where birth_date=1845-03-2
;
SELECT * FROM Person where birth_date="1845-03-2"
;
SELECT * FROM Person limit 10; 
SELECT * FROM Person where givenName = "Henri";
SELECT * FROM Person where id = 1; ;
SELECT givenName FROM Person where id = 1; ;
SELECT * FROM Person where givenName=Wilhelm Conrad; ;
SELECT * FROM Person where givenName="Wilhelm Conrad";
SELECT * FROM Person 
WHERE givenName like "Aaron";
SELECT * FROM Person  WHERE givenName like "Aaron";
SELECT * FROM Person 
WHERE givenName like '%Lord%'
;
SELECT * FROM Person  WHERE givenName like '%Lord%';
SELECT * FROM Person 
WHERE givenName like 'Lord'
;
SELECT * FROM Person  WHERE givenName like 'Lord';
SELECT * FROM Person 
WHERE givenName like '"Lord"';
SELECT * FROM Person  WHERE givenName like '"Lord"';
SELECT * FROM Person 
WHERE givenName like "Lord";
SELECT * FROM Person  WHERE givenName like "Lord";
SELECT * FROM Person 
WHERE givenName like 'Lord';
SELECT * FROM Person  WHERE givenName like 'Lord';
SELECT * FROM Person 
WHERE givenName like '\"Lord\"';
SELECT * FROM Person  WHERE givenName like '\"Lord\"';
SELECT * FROM Person 
WHERE givenName like 'Lord'
;
SELECT * FROM Person  WHERE givenName like 'Lord';
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM Person limit 10;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT * FROM Person limit 10; 
SELECT * FROM Person 
WHERE givenName like 'Lord';
SELECT * FROM Person  WHERE givenName like 'Lord';
SELECT * FROM Person 
WHERE givenName like '%Lord%';
SELECT * FROM Person  WHERE givenName like '%Lord%';
SELECT * FROM Person
WHERE givenName LIKE "%Marie%"
AND familyName LIKE '%Curie%';
SELECT * FROM Person WHERE givenName LIKE "%Marie%" AND familyName LIKE '%Curie%';
SELECT id FROM Person
WHERE givenName LIKE "%Marie%"
AND familyName LIKE '%Curie%'
;
SELECT id FROM Person WHERE givenName LIKE "%Marie%" AND familyName LIKE '%Curie%';
SELECT * FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%";
SELECT * FROM NobelPrize WHERE affiliations_name LIKE "%CERN%";
SELECT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%";
SELECT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%";
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%";
SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%";
WITH (
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%") AS cid 
SELECT * FROM City WHERE id=cid;
WITH ( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%") AS cid  SELECT * FROM City WHERE id=cid;
WITH cid AS (
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%")
SELECT * FROM City WHERE id=cid;
WITH cid AS ( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%") SELECT * FROM City WHERE id=cid;
SELECT * FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%")
SELECT * FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%");
SELECT * FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%")    SELECT * FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%");
SELECT * FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%");
SELECT * FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%");
SELECT country FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%");
SELECT country FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%");
SELECT country FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%") AS cid 
;
SELECT country FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%") AS cid;
SELECT COUNT(familyName) FROM Person;
SELECT COUNT(familyName) FROM Person
GROUP BY familyName;
SELECT COUNT(familyName) FROM Person GROUP BY familyName;
SELECT COUNT(familyName) FROM Person
GROUP BY familyName;
SELECT COUNT(familyName) FROM Person GROUP BY familyName;
SELECT       `column`
    FROM     `your_table`
    GROUP BY `column`
    ORDER BY COUNT(*) DESC
    LIMIT    1;
SELECT       `column`     FROM     `your_table`     GROUP BY `column`     ORDER BY COUNT(*) DESC     LIMIT    1;
SELECT familyName FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC LIMIT 10;
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC LIMIT 10; 
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10; 
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY ','
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY ','  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY ","
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY ","  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY ","
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY "," OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10; 
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10; 
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10;
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10; 
SELECT familyName f1, MAX(COUNT(familyName)) FROM Person
GROUP BY familyName f1
ORDER BY COUNT(*) DESC limit 10; 
SELECT familyName f1, MAX(COUNT(familyName)) FROM Person GROUP BY familyName f1 ORDER BY COUNT(*) DESC limit 10;
SELECT familyName f1, COUNT(familyName) FROM Person
GROUP BY familyName f1
ORDER BY COUNT(*) DESC;
SELECT familyName f1, COUNT(familyName) FROM Person GROUP BY familyName f1 ORDER BY COUNT(*) DESC;
SELECT familyName, MAX(c) FROM (
SELECT familyName, COUNT(familyName) c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC);
SELECT familyName, MAX(c) FROM ( SELECT familyName, COUNT(familyName) c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC);
SELECT familyName, MAX(c) FROM (
SELECT familyName, COUNT(familyName) c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC);
SELECT familyName, MAX(c) FROM ( SELECT familyName, COUNT(familyName) c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC);
SELECT familyName, max(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(familyName) DESC;
SELECT familyName, max(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(familyName) DESC;
SELECT familyName, max(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(familyName) DESC limit 10; 
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName;
SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName;
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName;
SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName;
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
;
SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC LIMIT 10;
SELECT MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
);
SELECT MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC );
SELECT MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
);
SELECT MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC );
SELECT familyName, MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
);
SELECT familyName, MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC );
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC limit 10; 
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC limit 10;
WITH temp AS (
WITH SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
)
SELECT * FROM temp; 
WITH temp AS ( WITH SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) SELECT * FROM temp;
WITH temp AS (
WITH SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC)
select * from temp 
;
WITH temp AS ( WITH SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC) select * from temp;
WITH temp(f, c) AS (
WITH SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC)
select * from temp; 
WITH temp(f, c) AS ( WITH SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC)  select * from temp;
WITH temp(f, c) AS (
WITH SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC);
WITH temp(f, c) AS ( WITH SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC);
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC;
SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC;
SELECT familyName from (
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) 
;
SELECT familyName from ( SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC );
SELECT familyName from (
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub;
SELECT familyName from ( SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub;
SELECT familyName from (
SELECT familyName, COUNT(familyName) FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub;
SELECT familyName from ( SELECT familyName, COUNT(familyName) FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub;
SELECT country FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%")
SELECT familyName, Max(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
LIMIT 5;
SELECT country FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%")  SELECT familyName, Max(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub LIMIT 5;
SELECT familyName, Max(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
LIMIT 5;
SELECT familyName, Max(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub LIMIT 5;
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC LIMIT 5; 
SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC LIMIT 5;
SELECT familyName, c FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
WHERE c=MAX(c)
LIMIT 5;
SELECT familyName, c FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub WHERE c=MAX(c) LIMIT 5;
SELECT familyName, c FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub limit 10; 
SELECT familyName, c FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub limit 10;
SELECT familyName, c, MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
LIMIT 5;
SELECT familyName, c, MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub LIMIT 5;
SELECT familyName, MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
LIMIT 5;
SELECT familyName, MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub LIMIT 5;
SELECT familyName, MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
ORDER BY COUNT(*) DESC
) AS Sub
LIMIT 5;
SELECT familyName, MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName ORDER BY COUNT(*) DESC ) AS Sub LIMIT 5;
(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub;
( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub;
SELECT familyName, c FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub
WHERE c=(
SELECT MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub2)
;
SELECT familyName, c FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub  WHERE c=( SELECT MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub2);
SELECT familyName FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub
WHERE c=(
SELECT MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub2);
SELECT familyName FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub  WHERE c=( SELECT MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub2);
select * from Organization limit 10; 
select * from NobelPrize limit ; 
show tables 
;
select * from NobelPrize limit 2; 
Select * from NobelPrize 
WHERE affiliations_name LIKE "%University of California%";
Select * from NobelPrize  WHERE affiliations_name LIKE "%University of California%";
Select * from NobelPrize 
WHERE affiliations_name LIKE "%University of California%"
GROUP BY affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE "%University of California%" GROUP BY affiliation_city_id;
select * FROM City limit 2;
select * FROM City limit 32;
Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
GROUP BY affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California" GROUP BY affiliation_city_id;
Select * from NobelPrize 
WHERE affiliations_name LIKE "%University of California"
GROUP BY affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE "%University of California" GROUP BY affiliation_city_id;
Select * from NobelPrize 
WHERE affiliations_name LIKE " University of California"
GROUP BY affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE " University of California" GROUP BY affiliation_city_id;
select * from City where id=0; 
select * from City where id=32; 
select * from City where id=77; 
select * from City where id=148; 
select * from City where id=195; 
select * from City where id=247; 
select * from City where id=270; 
Select * from NobelPrize 
WHERE affiliations_name LIKE " University of California";
Select * from NobelPrize  WHERE affiliations_name LIKE " University of California";
Select affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE " University of California"
;
Select affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE " University of California";
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE " University of California"
;
Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE " University of California";
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE "University of California"
;
Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California";
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY '|'
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE "University of California"
;
Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California";Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
Group by affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California"  Group by affiliation_city_id;
select * from NobelPrize WHERE id=835
;
DROP TABLE IF EXISTS City;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Ogranization;
DROP TABLE IF EXISTS NobelPrize;
-- City(id, name, country)
CREATE TABLE City (
-- City ID
id INT NOT NULL,
-- City name
name VARCHAR(100) NOT NULL,
-- Country the city belongs to
country VARCHAR(100) NOT NULL,
-- Primary key constraint for City
PRIMARY KEY (id)
);
CREATE TABLE City (  id INT NOT NULL,  name VARCHAR(100) NOT NULL,  country VARCHAR(100) NOT NULL,  PRIMARY KEY (id) );
-- Person(id, givenName, familyName, gender birth_date, birth_city_id)
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- Ogranization(id, orgName, founded_date, city_id)
CREATE TABLE Organization(
-- Organization ID
id INT NOT NULL,
-- The organization name
orgName VARCHAR(100),
-- The date when the organization was founded
founded_date DATE,
-- The city ID where the location locate at
city_id INT, 
PRIMARY KEY (id)
);
CREATE TABLE Organization(  id INT NOT NULL,  orgName VARCHAR(100),  founded_date DATE,  city_id INT,   PRIMARY KEY (id) );
-- NobelPrizes(Id, num, awardYear, category, sortOrder, portion, dataAwarded, prizeStatus, PrizeAmount, affiliations_name, affiliation_city_id)
CREATE TABLE NobelPrize(
-- Person ID
id INT NOT NULL,
-- The number of the awarding time
num INT NOT NULL,
-- Award year
awardYear VARCHAR(100),
-- Category
category VARCHAR(100),
-- Sorted Order
sortOrder INT,
-- Obtained Portion of the Award 
portion VARCHAR(100),
-- Awarded date
dataAwarded DATE, 
-- Prize Status
prizeStatus VARCHAR(100),
-- Prize Amount
PrizeAmount INT, 
-- Affiliation name
affiliations_name VARCHAR(100), 
-- City ID of the affiliation 
affiliation_city_id INT, 
-- Primary key constraint for NobelPrize
PRIMARY KEY (id, num, affiliations_name, affiliation_city_id)
);
CREATE TABLE NobelPrize(  id INT NOT NULL,  num INT NOT NULL,  awardYear VARCHAR(100),  category VARCHAR(100),  sortOrder INT,  portion VARCHAR(100),  dataAwarded DATE,   prizeStatus VARCHAR(100),  PrizeAmount INT,   affiliations_name VARCHAR(100),   affiliation_city_id INT,   PRIMARY KEY (id, num, affiliations_name, affiliation_city_id) );
-- load City Data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del' 
INTO TABLE City
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/city.del'  INTO TABLE City FIELDS TERMINATED BY '|'  LINES TERMINATED BY '\n';
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load NobelPrize data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del' 
INTO TABLE NobelPrize
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/nobel_prize.del'  INTO TABLE NobelPrize FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
-- load Organization data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del' 
INTO TABLE Organization 
FIELDS TERMINATED BY '|'
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/organization.del'  INTO TABLE Organization  FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select * from NobelPrize 
WHERE affiliations_name LIKE "University of California"
Group by affiliation_city_id;
Select * from NobelPrize  WHERE affiliations_name LIKE "University of California"  Group by affiliation_city_id;
Select COUNT(*) from NobelPrize 
WHERE affiliations_name LIKE "University of California"
Group by affiliation_city_id;
Select COUNT(*) from NobelPrize  WHERE affiliations_name LIKE "University of California" Group by affiliation_city_id;
Select COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select COUNT(affiliation_city_id) from NobelPrize 
WHERE DISTINCT affiliations_name LIKE "University of California"
Group by affiliation_city_id;
Select COUNT(affiliation_city_id) from NobelPrize  WHERE DISTINCT affiliations_name LIKE "University of California" Group by affiliation_city_id;
Select DISTINCT affiliation from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California";
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California";
select COUNT(*) FROM( 
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California");
select COUNT(*) FROM(  Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California");
select COUNT(*) FROM( 
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California") AS Sub3;
select COUNT(*) FROM(  Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California") AS Sub3;
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California");
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California");
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select DISTINCT COUNT(affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California";
select COUNT(*) FROM( 
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE "University of California") AS Sub3;
select COUNT(*) FROM(  Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California") AS Sub3;
+----------+
;
select COUNT(*) FROM( 
Select DISTINCT affiliation_city_id from NobelPrize 
WHERE affiliations_name LIKE "University of California") AS Sub4;
select COUNT(*) FROM(  Select DISTINCT affiliation_city_id from NobelPrize  WHERE affiliations_name LIKE "University of California") AS Sub4;
-- q3
SELECT familyName FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub31
WHERE c=(
SELECT MAX(c) FROM(
SELECT familyName, COUNT(familyName) AS c FROM Person
GROUP BY familyName
-- ORDER BY COUNT(*) DESC
) AS Sub32);
SELECT familyName FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub31  WHERE c=( SELECT MAX(c) FROM( SELECT familyName, COUNT(familyName) AS c FROM Person GROUP BY familyName  ) AS Sub32);
SELECT country FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "%CERN%")
;
SELECT country FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "%CERN%");
SELECT country FROM City WHERE id=(
SELECT DISTINCT affiliation_city_id FROM NobelPrize
WHERE affiliations_name LIKE "CERN")
;
SELECT country FROM City WHERE id=( SELECT DISTINCT affiliation_city_id FROM NobelPrize WHERE affiliations_name LIKE "CERN");
SELECT id FROM Person
WHERE givenName LIKE "Marie"
AND familyName LIKE 'Curie';;
SELECT id FROM Person WHERE givenName LIKE "Marie" AND familyName LIKE 'Curie';
SELECT id FROM Person
WHERE givenName LIKE "Marie"
AND familyName LIKE 'Curie';
SELECT id FROM Person WHERE givenName LIKE "Marie" AND familyName LIKE 'Curie';
SELECT count(*) FROM Organization ;
SELECT count(*) FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id;
SELECT count(*) FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
SELECT * FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id;
SELECT * FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
SELECT * FROM Organization
;
SELECT awardYear FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id;
SELECT awardYear FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
SELECT awardYear FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id
ORDER BY DESC;
SELECT awardYear FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id ORDER BY DESC;
SELECT awardYear FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id
ORDER BY awardYear DESC;
SELECT awardYear FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id ORDER BY awardYear DESC;
SELECT count(awardYear) FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id;
SELECT count(awardYear) FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
SELECT count(DISTINCT awardYear) FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id
;
SELECT count(DISTINCT awardYear) FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
SELECT count(DISTINCT awardYear) FROM Organization, NobelPrize
WHERE Organization.id=NobelPrize.id
;
SELECT count(DISTINCT awardYear) FROM Organization, NobelPrize WHERE Organization.id=NobelPrize.id;
Select COUNT(DISTINCT affiliation_city_id) from NobelPrize 
WHERE affiliations_name LIKE "University of California";
Select COUNT(DISTINCT affiliation_city_id) from NobelPrize  WHERE affiliations_name LIKE "University of California";
use cs143
source load.sql
use cs143
source load.sql
source q1.sql
use cs143
source q2.sql
source load.sql
source q2.sql
show tables
;
select * from Person;
use cs143
source load.sql
select * from City limit 3; 
select * from Organization limit 3; 
select * from Person limit 3; 
select * from NobelPrize limit 3; 
use cs143
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from Person limit 2; 
select count(*) from Person limit 2; 
use cs143
DROP TABLE IF EXISTS Person;
CREATE TABLE Person (
-- Person ID
id INT NOT NULL,
-- Given Name
givenName VARCHAR(100),
-- Family Name
familyName VARCHAR(100),
-- Gender
gender VARCHAR(100),
-- Date of Birth
birth_date DATE, 
-- City ID of the Birth City
birth_city_id INT,
-- Primary key constraint for Person
PRIMARY KEY (id)
);
CREATE TABLE Person (  id INT NOT NULL,  givenName VARCHAR(100),  familyName VARCHAR(100),  gender VARCHAR(100),  birth_date DATE,   birth_city_id INT,  PRIMARY KEY (id) );
-- load Person data
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del' 
INTO TABLE Person
FIELDS TERMINATED BY '|'
-- expect fields to be enclosed within " quoting characters
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/home/cs143/project3/convert/person.del'  INTO TABLE Person FIELDS TERMINATED BY '|'  OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n';
select * from Person
;
source load.sql
source q2.sql
source q1.sql
source q2.sql
source q3.sql
source q4.sql
source q5.sql
use cs143
select count(*) from city; 
select count(*) from City; 
select * from Person limit 1;
select * from City limit 1;
select * from NobelPrize limit 1;
SELECT COUNT(*) FROM NobelPrize WHERE id=1 
;
SELECT COUNT(*) AS countFROM NobelPrize WHERE id=1 
;
SELECT COUNT(*) AS count FROM NobelPrize WHERE id=1 
;
select * from NobelPrize group by number
;
select * from NobelPrize group by num
;
select * from NobelPrize where id=482;
query2: SELECT * FROM NobelPrize WHERE id=482 AND num=1 ;
SELECT * FROM NobelPrize WHERE id=482 AND num=1 ;
SELECT * FROM NobelPrize WHERE id=3 ;
use cs143
source load.sql
source q1
source q1.sql;
use cs143
source q1
source q1;
source q1.sql
source q2.sql
source q3.sql
source q4.sql
source q5.sql
quitl
;
quit;
